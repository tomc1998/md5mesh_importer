// Warnings seem to be created when function calls are generated by macros in
// different modules?
#![allow(dead_code)]

#[macro_use]
extern crate nom;

mod md5mesh;

pub use md5mesh::*;

use nom::{float_s, digit, space};
use std::str::FromStr;

/// Parser to consume to the end of a line if all that is contained is a comment
named!(consume_rest_of_line_if_comment<&str, &str>,
  do_parse!(
    opt!(space) >>
    alt!(
      tag!("\n") |
      tag!("\r\n") |
      do_parse!( tag!("//") >> take_until_and_consume_s!("\n") >> ("") )) >>
    ("")
  )
);

/// Parse a number to a u32. Integer overflows will result in an error.
named!(parse_u32<&str, u32>, map_res!( digit, u32::from_str));
/// Parse a number to a i32. Integer overflows will result in an error.
named!(parse_i32<&str, i32>, 
  do_parse!(
    neg: opt!(tag!("-")) >>
    val: map_res!( digit, i32::from_str) >>
    (if neg.is_some() { -val } else { val })
  )
);
named!(parse_f32<&str, f32>, 
  do_parse!(
    neg: opt!(tag!("-")) >>
    val: call!(float_s) >>
    (if neg.is_some() { -val } else { val })
  )
);

/// Parser for a 3 dimension vector of f32s (Position and orientation of joint).
named!(parse_vec3f<&str, [f32; 3]>,
       do_parse!(
         opt!(space) >>
         x: parse_f32 >>
         space >>
         y: parse_f32 >>
         space >>
         z: parse_f32 >>
         opt!(space) >>
         ([x, y, z])
     )
  );

/// Parser for a 2 dimension vector of f32s (UV coords).
named!(parse_vec2f<&str, [f32; 2]>,
       do_parse!(
         opt!(space) >>
         x: parse_f32 >>
         space >>
         y: parse_f32 >>
         opt!(space) >>
         ([x, y])
     )
  );

#[cfg(test)]
mod tests {
  #[test]
  fn it_works() {
    use md5mesh::load_mesh;
    load_mesh("boblampclean.md5mesh");
  }
}

