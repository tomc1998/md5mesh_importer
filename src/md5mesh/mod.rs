// Warnings seem to be created when function calls are generated by macros in
// different modules?
#![allow(dead_code)]

//! This is a module for parsing .md5mesh files.

mod mesh;
mod header;
mod joints;

pub use self::joints::Joint;
pub use self::mesh::{Vert, Tri, Weight, MD5Mesh};
pub use self::header::MD5MeshHeader;

use md5mesh::mesh::parse_md5mesh_mesh;
use md5mesh::header::parse_md5mesh_header;
use md5mesh::joints::parse_md5mesh_joints;
use {parse_u32, parse_i32, parse_f32, parse_vec3f, consume_rest_of_line_if_comment};
use nom::space;
use std::path::Path;


#[derive(Debug, Clone)]
pub struct MD5Scene {
  pub header: MD5MeshHeader,
  pub joint_list: Vec<Joint>,
  pub mesh_list: Vec<MD5Mesh>,
}
impl MD5Scene {
  pub fn new(header: MD5MeshHeader, joint_list: Vec<Joint>, mesh_list: Vec<MD5Mesh>) -> MD5Scene {
    MD5Scene { 
      header: header,
      joint_list: joint_list,
      mesh_list: mesh_list,
    }
  }
}

/// Parser for the whole md5mesh file
named!(parse_md5mesh<&str, MD5Scene>,
  do_parse!(
    header: parse_md5mesh_header >>
    many0!(consume_rest_of_line_if_comment) >>
    joints: parse_md5mesh_joints >> 
    many0!(consume_rest_of_line_if_comment) >>
    meshes: many0!(
      do_parse!(
        mesh: parse_md5mesh_mesh >>
        many0!(consume_rest_of_line_if_comment) >>
        (mesh)
      )
    ) >>
    (MD5Scene::new(header, joints, meshes))
  )
);

pub fn load_mesh<P: AsRef<Path>>(path: P) -> MD5Scene {
  use std::io::prelude::*;
  use std::fs::File;

  let mut f = File::open(path).unwrap();
  let mut data = String::new();
  f.read_to_string(&mut data).unwrap();

  let scene = parse_md5mesh(&data);
  println!("{:?}", scene);

  return scene.unwrap().1;
}

